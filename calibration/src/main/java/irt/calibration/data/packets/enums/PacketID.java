package irt.calibration.data.packets.enums;

import java.nio.ByteBuffer;
import java.util.Optional;

public enum PacketID {

	NONE,
	INFO ,
	MEASUREMENT_ALL,
	CONFIGURATION_ALL,
	CALIBRATION_MODE,
	MUTE,
	POWER_INPUT,
	POWER_INPUT_ADC,
	POWER_OUTPUT,
	POWER_OUTPUT_ADC,
	TEMPERATURE,
	TEMPERATURE_ADC,
	TEMPERATURE_CPU,
	CURRENT_ADC,
	DEVICE_TYPE,
	DEVICE_SN,
	FIRMWARE_VERSION,
	FIRMWARE_BUILD_DATE,
	UNIT_UPTIME_COUNTER,
	UNIT_NAME,
	UNIT_PART_NUMBER,
	SUMMARY_ALARM,
	V5_5,
	V13_2,
	V13_2_NEG,
	CURRENT,
	ATTENUATION,
	ATTENUATION_RANGE,
	REFERENCE_SOURCE,
	GAIN,
	GAIN_RANGE,
	FREQUENCY,
	FREQUENCY_RANGE,
	FLAGS,
	OFFSET,
	ALC_ENABLE,
	ALC_LEVEL,
	ALC_RANGE,
	ALC_ENABLED,
	ALC_THRESHOLD,
	ALC_THRESHOLD_RANGE,
	LNB_POWER,
	LNB_REFERENCE_CONTROL,
	LO_SET,
	LO_FREQUENCIES,
	REDUNDANCY_ENABLE,
	REDUNDANCY_MODE,
	REDUNDANCY_NAME,
	REDUNDANCY_SET_ONLINE,
	REDUNDANCY_STATUS,
	SPECTRUM_INVERSION,
	OFFSET_RANGE,
	OFFSET_1_TO_MULTI,
	APC_ENABLE,
	APC_LEVEL,
	APC_RANGE,
	LNB_LO_SELECT,
	POWER_REFLECTED,
	MEASUREMENT_STATUS,
	STATUS_LNB1,
	STATUS_LNB2,
	DOWNLINK_WAVEGUIDE_SWITCH,
	DOWNLINK_STATUS,
	CONVERTER_DAC1,
	CONVERTER_DAC2,
	CONVERTER_DAC3,
	CONVERTER_DAC4;

	public byte[] toBytes() {
		return ByteBuffer.allocate(2).putShort((short) ordinal()).array();
	}

	public static Optional<PacketID> valueOf(short pID) {
		return Optional.of(pID & 0xFFFF).filter(i->(i>=0 && i<values().length)).map(i->values()[i]);
	}
}
